# Soft Serve Server configurations

# The name of the server.
# This is the name that will be displayed in the UI.
name: "ASCINET server"

# Logging configuration.
log:
  # Log format to use. Valid values are "json", "logfmt", and "text".
  format: "text"
  # Time format for the log "timestamp" field.
  # Should be described in Golang's time format.
  time_format: "2006-01-02 15:04:05"
  # Path to the log file. Leave empty to write to stderr.
  path: "server.log"

# The SSH server configuration.
ssh:
  # The address on which the SSH server will listen.
  listen_addr: ":8080"

  # The public URL of the SSH server.
  # This is the address that will be used to clone repositories.
  # public_url: "ssh://localhost:23231"

  # The path to the SSH server's private key.
  key_path: ssh/soft_serve_host_ed25519

  # The path to the server's client private key. This key will be used to
  # authenticate the server to make git requests to ssh remotes.
  client_key_path: ssh/soft_serve_client_ed25519

  # The maximum number of seconds a connection can take.
  # A value of 0 means no timeout.
  max_timeout: 0

  # The number of seconds a connection can be idle before it is closed.
  # A value of 0 means no timeout.
  idle_timeout: 600

# Custom handlers
handlers:
  /message:
    type: func
    value: |
      func(conn soft_serve.Connection) {
        scanner := bufio.NewScanner(conn)
        for scanner.Scan() {
          line := scanner.Text()
          fileName := fmt.Sprintf("%d.txt", conn.ID())
          f, err := os.Create(fileName)
          if err != nil {
            log.Printf("failed to create file: %v", err)
            continue
          }
          defer f.Close()

          _, err = fmt.Fprintln(f, line)
          if err != nil {
            log.Printf("failed to write message: %v", err)
            continue
          }
          log.Printf("Received message: %s", line)
        }
        if err := scanner.Err(); err != nil {
          log.Printf("scan error: %v", err)
        }
      }

  /file:
    type: func
    value: |
      func(conn soft_serve.Connection) {
        scanner := bufio.NewScanner(conn)
        for scanner.Scan() {
          line := scanner.Text()
          if strings.HasPrefix(line, "file:") {
            fileName := fmt.Sprintf("%d.txt", conn.ID())
            f, err := os.Create(fileName)
            if err != nil {
              log.Printf("failed to create file: %v", err)
              continue
            }
            defer f.Close()

            _, err = io.Copy(f, strings.NewReader(strings.TrimPrefix(line, "file:")))
            if err != nil {
              log.Printf("failed to write file: %v", err)
              continue
            }
            log.Printf("Received file: %s", fileName)
          }
        }
        if err := scanner.Err(); err != nil {
          log.Printf("scan error: %v", err)
        }
      }

  /list_files:
    type: func
    value: |
      func(conn soft_serve.Connection) {
        files, err := os.ReadDir(".")
        if err != nil {
          log.Printf("failed to read files directory: %v", err)
          return
        }
        for _, file := range files {
          fmt.Fprintln(conn, file.Name())
        }
      }
